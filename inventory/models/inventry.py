from django.db import models
from django.utils.timezone import now

from inventory.models.category import Category
from inventory.models.supplier import Supplier


class InventoryItem(models.Model):
    UNIT_CHOICES = (
        ('kg', 'Kilogram'),
        ('l', 'Litr'),
        ('pcs', '∆èd…ôd'),
        ('package', 'Baƒülama')
    )

    name = models.CharField(
        max_length=100,
        verbose_name="Ad"
    )
    category = models.ForeignKey(
        Category,
        on_delete=models.CASCADE,
        verbose_name="Kateqoriya"
    )
    unit = models.CharField(
        max_length=20,
        choices=UNIT_CHOICES,
        verbose_name="Vahid"
    )

    supplier = models.ForeignKey(
        Supplier,
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="T…ôchizat√ßƒ±"
    )
    created_at = models.DateTimeField(
        auto_now_add=True,
        verbose_name="Yaradƒ±lma Tarixi"
    )
    updated_at = models.DateTimeField(
        auto_now=True,
        verbose_name="Yenil…ônm…ô Tarixi"
    )

    class Meta:
        verbose_name = "Anbar M…ôhsulu"
        verbose_name_plural = "Anbar M…ôhsullarƒ±"

    def __str__(self):
        if self.supplier:
            return f"{self.name} ({self.supplier or ''})"
        return f"{self.name or 'Adsƒ±z M…ôhsul'}"
    
class InventoryRecord(models.Model):
    inventory_item = models.ForeignKey(
        InventoryItem,
        on_delete=models.CASCADE,
        related_name='stock_records',
        verbose_name="Anbar M…ôhsulu"
    )
    quantity = models.DecimalField(
        max_digits=10,
        decimal_places=2,
        verbose_name="Miqdar"
    )
    RECORD_TYPE_CHOICES = (
        ('add', '∆èlav…ô'),
        ('remove', 'Silinm…ô')
    )
    record_type = models.CharField(
        max_length=16,
        choices=RECORD_TYPE_CHOICES,
        default="add",
        verbose_name="∆èm…ôliyyat n√∂v√º"
    )
    REASON_CHOICES_ADD = (
        ('purchase', 'Alƒ±≈ü'),
        ('gift', 'H…ôdiy…ô'),
        ('adjustment', 'D√ºz…ôli≈ü'),
    )
    REASON_CHOICES_REMOVE = (
        ('used', 'ƒ∞stifad…ô edilmi≈ü'),
        ('sold', 'Satƒ±lmƒ±≈ü'),
        ('expired', 'M√ºdd…ôti bitmi≈ü'),
        ('damaged', 'Z…ôd…ôl…ônmi≈ü'),
        ('spoilage', '√á√ºr√ºkm√º≈ü'),
        ('theft', 'Oƒüurluq'),
        ('other', 'Dig…ôr')
    )

    REASON_CHOICES = (*REASON_CHOICES_REMOVE, *REASON_CHOICES_ADD)
    reason = models.CharField(
        max_length=32,
        choices=REASON_CHOICES,
        default="purchase",
        verbose_name="S…ôb…ôb"
    )
    price = models.FloatField(
            verbose_name="Qiym…ôt",
            default=0
        )

    operation_date = models.DateField(
        verbose_name="Tarix",
         help_text=(
            "<strong>∆èm…ôliyyatƒ±n h…ôqiqi ba≈ü verdiyi tarixi se√ßin.</strong><br><br>"

            "<strong>üìå Alƒ±≈ü √º√ß√ºn n√ºmun…ô:</strong><br>"
            "M…ôhsulu <strong>3 g√ºn …ôvv…ôl</strong> almƒ±≈üsƒ±nƒ±z, lakin <strong>bu g√ºn</strong> sistem…ô …ôlav…ô edirsiniz. "
            "Bu halda, m…ôhz <strong>3 g√ºn …ôvv…ôlki tarixi</strong> (y…ôni alƒ±≈üƒ±n ba≈ü verdiyi g√ºn√º) se√ßm…ôlisiniz.<br><br>"

            "<strong>üö® Silinm…ô √º√ß√ºn n√ºmun…ô:</strong><br>"
            "M…ôhsul <strong>4 g√ºn …ôvv…ôl</strong> istifad…ôy…ô yararsƒ±z olub, lakin siz onu <strong>bu g√ºn</strong> sistem…ô daxil edirsiniz. "
            "Tarixi d√ºzg√ºn g√∂st…ôrm…ôk √º√ß√ºn <strong>4 g√ºn …ôvv…ôlki tarixi</strong> qeyd edin.<br><br>"

            "<em>∆èg…ôr bu qaydalara …ôm…ôl etm…ôs…ôniz, inventar m…ôlumatlarƒ± s…ôhv ola bil…ôr v…ô hesabatlar yanlƒ±≈ü n…ôtic…ô ver…ô bil…ôr.</em>"
            "<hr>"
        ),
        default=now,
    )

    expiration_date = models.DateField(
        null=True,
        blank=True,
        verbose_name="Son ƒ∞stifad…ô Tarixi",
        help_text="M…ôhsulun son istifad…ô tarixini varsa, burada qeyd edin ki, n…ô vaxt istifad…ôy…ô yararsƒ±z olacaƒüƒ±nƒ± izl…ôy…ô bil…ôsiniz."
    )

    created_at = models.DateTimeField(
        auto_now_add=True,
        verbose_name="Yaradƒ±lma Tarixi"
    )
    updated_at = models.DateTimeField(
        auto_now=True,
        verbose_name="Yenil…ônm…ô Tarixi"
    )

    class Meta:
        verbose_name = "Stok Qeyd"
        verbose_name_plural = "Stok Qeydl…ôri"

    def __str__(self):
        return f"{self.inventory_item.name} - {self.quantity} {self.inventory_item.unit}"
